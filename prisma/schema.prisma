// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Settings {
  @@map("settings")
  id                   Int       @id @default(1)
  allowRegistration    Boolean   @map("allow_registration") @default(false)
  usersActiveByDefault Boolean   @map("users_active_by_default") @default(false)
}

model User {
  @@map("users")
  id           Int            @id @default(autoincrement())
  username     String         @unique
  passwordHash String         @map("password_hash")
  fio          String?
  isAdmin      Boolean        @map("is_admin") @default(false)
  isActive     Boolean        @map("is_active") @default(false)
  solvedTasks  Solve[]
  groups       GroupsUsers[]
}

model Contest {
  @@map("contests")
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean           @map("is_active") @default(false)
  tasks       ContestsTasks[]
}

model Task {
  @@map("tasks")
  id          Int               @id @default(autoincrement())
  name        String
  cost        Int
  category    String
  description String?
  flag        String
  isActive    Boolean           @map("is_active") @default(false)
  solves      Solve[]
  contests    ContestsTasks[] 
}

model Group {
  @@map("groups")
  id    Int             @id @default(autoincrement())
  name  String?
  users GroupsUsers[]
}

model Solve {
  @@map("solves")
  @@id([userId, taskId])
  userId Int      @map("user_id")
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId Int      @map("task_id")
  task   Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  time   DateTime @default(now())
}

model GroupsUsers {
  @@map("groups_users")
  @@id([userId, groupId])
  userId  Int   @map("user_id")
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId Int   @map("group_id")
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model ContestsTasks {
  @@map("contests_tasks")
  @@id([contestId, taskId])
  contestId Int     @map("contest_id")
  contest   Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  taskId    Int     @map("task_id")
  task      Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
}
